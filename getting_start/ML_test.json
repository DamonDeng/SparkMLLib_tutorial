{"paragraphs":[{"text":"import java.io.File\nimport scala.io.Source\n\nimport org.apache.log4j.Logger\nimport org.apache.log4j.Level\n\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd._\nimport org.apache.spark.mllib.recommendation.{ALS, Rating, MatrixFactorizationModel}","user":"anonymous","dateUpdated":"2017-05-26T14:32:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport java.io.File\n\nimport scala.io.Source\n\nimport org.apache.log4j.Logger\n\nimport org.apache.log4j.Level\n\nimport org.apache.spark.SparkConf\n\nimport org.apache.spark.SparkContext\n\nimport org.apache.spark.SparkContext._\n\nimport org.apache.spark.rdd._\n\nimport org.apache.spark.mllib.recommendation.{ALS, Rating, MatrixFactorizationModel}\n"}]},"apps":[],"jobName":"paragraph_1495805791091_-989664762","id":"20170526-133631_1433859017","dateCreated":"2017-05-26T13:36:31+0000","dateStarted":"2017-05-26T14:32:31+0000","dateFinished":"2017-05-26T14:32:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2943"},{"text":"//val movieLensHomeDir = \"s3://emr.examples/movieLens/\"\nval movieLensHomeDir = \"s3://spark.tk.damondeng.com/dataset/ml10m/\"\n\nval movies = sc.textFile(movieLensHomeDir + \"movies.dat\").map { line =>\n  val fields = line.split(\"::\")\n  // format: (movieId, movieName)\n  (fields(0).toInt, fields(1))\n}.collect.toMap\n\nval ratings = sc.textFile(movieLensHomeDir + \"ratings.dat\").map { line =>\n  val fields = line.split(\"::\")\n  // format: (timestamp % 10, Rating(userId, movieId, rating))\n  (fields(3).toLong % 10, Rating(fields(0).toInt, fields(1).toInt, fields(2).toDouble))\n}","user":"anonymous","dateUpdated":"2017-05-26T15:36:45+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nmovieLensHomeDir: String = s3://spark.tk.damondeng.com/dataset/ml10m/\nmovies: scala.collection.immutable.Map[Int,String] = Map(2163 -> Attack of the Killer Tomatoes! (1980), 8607 -> Tokyo Godfathers (2003), 645 -> Nelly & Monsieur Arnaud (1995), 42900 -> Cul-de-sac (1966), 892 -> Twelfth Night (1996), 69 -> Friday (1995), 53550 -> Rescue Dawn (2006), 37830 -> Final Fantasy VII: Advent Children (2004), 5385 -> Last Waltz, The (1978), 5810 -> 8 Mile (2002), 7375 -> Prince & Me, The (2004), 5659 -> Rocking Horse Winner, The (1950), 2199 -> Phoenix (1998), 8062 -> Dahmer (2002), 3021 -> Funhouse, The (1981), 8536 -> Intended, The (2002), 5437 -> Manhattan Project, The (1986), 1322 -> Amityville 1992: It's About Time (1992), 1665 -> Bean (1997), 5509 -> Biggie and Tupac (2002), 5686 -> Russian Ark (Russkiy Kovcheg) (2002), 1036 -> Die Hard (1988), 2822 -> Medi...\nratings: org.apache.spark.rdd.RDD[(Long, org.apache.spark.mllib.recommendation.Rating)] = MapPartitionsRDD[11] at map at <console>:42\n"}]},"apps":[],"jobName":"paragraph_1495805798065_-1053902504","id":"20170526-133638_43364184","dateCreated":"2017-05-26T13:36:38+0000","dateStarted":"2017-05-26T15:36:45+0000","dateFinished":"2017-05-26T15:36:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2944"},{"text":"val numRatings = ratings.count\nval numUsers = ratings.map(_._2.user).distinct.count\nval numMovies = ratings.map(_._2.product).distinct.count\n\nprintln(\"Got \" + numRatings + \" ratings from \"\n  + numUsers + \" users on \" + numMovies + \" movies.\")","user":"anonymous","dateUpdated":"2017-05-26T15:37:25+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nnumRatings: Long = 10000054\n\nnumUsers: Long = 69878\n\nnumMovies: Long = 10677\nGot 10000054 ratings from 69878 users on 10677 movies.\n"}]},"apps":[],"jobName":"paragraph_1495805806455_113056234","id":"20170526-133646_810218221","dateCreated":"2017-05-26T13:36:46+0000","dateStarted":"2017-05-26T15:37:25+0000","dateFinished":"2017-05-26T15:37:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2945"},{"text":"val training = ratings.filter(x => x._1 < 6)\n  .values\n  .cache()\nval validation = ratings.filter(x => x._1 >= 6 && x._1 < 8)\n  .values\n  .cache()\nval test = ratings.filter(x => x._1 >= 8).values.cache()\n\nval numTraining = training.count()\nval numValidation = validation.count()\nval numTest = test.count()\n\nprintln(\"Training: \" + numTraining + \", validation: \" + numValidation + \", test: \" + numTest)\n","user":"anonymous","dateUpdated":"2017-05-26T15:38:10+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ntraining: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[21] at values at <console>:45\n\nvalidation: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[23] at values at <console>:45\n\ntest: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[25] at values at <console>:44\n\nnumTraining: Long = 6002473\n\nnumValidation: Long = 1999675\n\nnumTest: Long = 1997906\nTraining: 6002473, validation: 1999675, test: 1997906\n"}]},"apps":[],"jobName":"paragraph_1495805893848_71426732","id":"20170526-133813_212696538","dateCreated":"2017-05-26T13:38:13+0000","dateStarted":"2017-05-26T15:38:10+0000","dateFinished":"2017-05-26T15:38:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2946"},{"text":"/** Compute RMSE (Root Mean Squared Error). */\ndef computeRmse(model: MatrixFactorizationModel, data: RDD[Rating], n: Long): Double = {\n    val predictions: RDD[Rating] = model.predict(data.map(x => (x.user, x.product)))\n    val predictionsAndRatings = predictions.map(x => ((x.user, x.product), x.rating))\n    .join(data.map(x => ((x.user, x.product), x.rating))).values\n    math.sqrt(predictionsAndRatings.map(x => (x._1 - x._2) * (x._1 - x._2)).reduce(_ + _) / n)\n}","user":"anonymous","dateUpdated":"2017-05-26T15:39:54+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ncomputeRmse: (model: org.apache.spark.mllib.recommendation.MatrixFactorizationModel, data: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating], n: Long)Double\n"}]},"apps":[],"jobName":"paragraph_1495813090501_412471009","id":"20170526-153810_1930558295","dateCreated":"2017-05-26T15:38:10+0000","dateStarted":"2017-05-26T15:39:54+0000","dateFinished":"2017-05-26T15:39:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2947"},{"text":"val ranks = List(8, 12)\nval lambdas = List(0.1, 10.0)\nval numIters = List(10, 20)\nvar bestModel: Option[MatrixFactorizationModel] = None\nvar bestValidationRmse = Double.MaxValue\nvar bestRank = 0\nvar bestLambda = -1.0\nvar bestNumIter = -1\nfor (rank <- ranks; lambda <- lambdas; numIter <- numIters) {\n  val model = ALS.train(training, rank, numIter, lambda)\n  val validationRmse = computeRmse(model, validation, numValidation)\n  println(\"RMSE (validation) = \" + validationRmse + \" for the model trained with rank = \" \n    + rank + \", lambda = \" + lambda + \", and numIter = \" + numIter + \".\")\n  if (validationRmse < bestValidationRmse) {\n    bestModel = Some(model)\n    bestValidationRmse = validationRmse\n    bestRank = rank\n    bestLambda = lambda\n    bestNumIter = numIter\n  }\n}","user":"anonymous","dateUpdated":"2017-05-26T15:40:16+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nranks: List[Int] = List(8, 12)\n\nlambdas: List[Double] = List(0.1, 10.0)\n\nnumIters: List[Int] = List(10, 20)\n\nbestModel: Option[org.apache.spark.mllib.recommendation.MatrixFactorizationModel] = None\n\nbestValidationRmse: Double = 1.7976931348623157E308\n\nbestRank: Int = 0\n\nbestLambda: Double = -1.0\n\nbestNumIter: Int = -1\nRMSE (validation) = 0.820138123581214 for the model trained with rank = 8, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8173024527014167 for the model trained with rank = 8, lambda = 0.1, and numIter = 20.\nRMSE (validation) = 3.667982949261605 for the model trained with rank = 8, lambda = 10.0, and numIter = 10.\nRMSE (validation) = 3.667982949261605 for the model trained with rank = 8, lambda = 10.0, and numIter = 20.\nRMSE (validation) = 0.8232471289871269 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.816113752509291 for the model trained with rank = 12, lambda = 0.1, and numIter = 20.\nRMSE (validation) = 3.667982949261605 for the model trained with rank = 12, lambda = 10.0, and numIter = 10.\nRMSE (validation) = 3.667982949261605 for the model trained with rank = 12, lambda = 10.0, and numIter = 20.\n"}]},"apps":[],"jobName":"paragraph_1495813194677_-305684977","id":"20170526-153954_1772057646","dateCreated":"2017-05-26T15:39:54+0000","dateStarted":"2017-05-26T15:40:16+0000","dateFinished":"2017-05-26T15:45:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2948"},{"text":"val candidates = sc.parallelize(movies.keys.toSeq)\nval recommendations = bestModel.get\n  .predict(candidates.map((100, _)))\n  .collect()\n  .sortBy(- _.rating)\n  .take(10)\n\nvar i = 1\nprintln(\"Movies recommended for you:\")\nrecommendations.foreach { r =>\n  println(\"%2d\".format(i) + \": \" + movies(r.product))\n  i += 1\n}","user":"anonymous","dateUpdated":"2017-05-26T15:52:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ncandidates: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[2582] at parallelize at <console>:44\n\nrecommendations: Array[org.apache.spark.mllib.recommendation.Rating] = Array(Rating(100,60983,4.3132745528538114), Rating(100,61742,3.7637487031836288), Rating(100,53883,3.7148198751762123), Rating(100,42783,3.706368565679444), Rating(100,32090,3.563473765566629), Rating(100,27376,3.5243158504713397), Rating(100,55156,3.4992802780179835), Rating(100,64280,3.4730710165770504), Rating(100,858,3.4668266311366636), Rating(100,4171,3.46440560488462))\n\ni: Int = 1\nMovies recommended for you:\n 1: Eve and the Fire Horse (2005)\n 2: Maradona by Kusturica (2008)\n 3: Power of Nightmares: The Rise of the Politics of Fear, The (2004)\n 4: Shadows of Forgotten Ancestors (1964)\n 5: Low Life, The (1995)\n 6: Tunnel, The (Der Tunnel) (2001)\n 7: Unreasonable Man, An (2006)\n 8: Hospital (1970)\n 9: Godfather, The (1972)\n10: Long Night's Journey Into Day (2000)\n"}]},"apps":[],"jobName":"paragraph_1495813216056_-1182897145","id":"20170526-154016_1711364872","dateCreated":"2017-05-26T15:40:16+0000","dateStarted":"2017-05-26T15:52:47+0000","dateFinished":"2017-05-26T15:52:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2949"},{"text":"// Save and load model\nbestModel.get.save(sc, \"s3://spark.tk.damondeng.com/movieLens/model/recommendation\")\nval sameModel = MatrixFactorizationModel.load(sc,  \"s3://spark.tk.damondeng.com/movieLens/model/recommendation\")\n","user":"anonymous","dateUpdated":"2017-05-26T15:54:44+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1495813688431_504112411","id":"20170526-154808_1304671745","dateCreated":"2017-05-26T15:48:08+0000","dateStarted":"2017-05-26T15:54:44+0000","status":"RUNNING","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2950"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1495814084920_-580710921","id":"20170526-155444_1030583408","dateCreated":"2017-05-26T15:54:44+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:2951"}],"name":"ML_test","id":"2CKRF3N2V","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}